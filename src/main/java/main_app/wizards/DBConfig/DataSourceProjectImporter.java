package main_app.wizards.DBConfig;

import helper_classes.SimpleDBData;
import main_app.metadata_storage.MetaDataManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class DataSourceProjectImporter extends JFrame {
    private JList dbList;
    private JPanel mainPanel;
    private JButton cancelButton;
    private JLabel helpLabel;
    private JButton confirmButton;
    private DefaultListModel listModel;
    private DatabaseConnectionWizard databaseConnectionWizard;

    public DataSourceProjectImporter(DatabaseConnectionWizard databaseConnectionWizard) {
        this.databaseConnectionWizard = databaseConnectionWizard;
        helpLabel.setText("Check the Data Sources to be imported.");
        listModel = new DefaultListModel();
        dbList.setModel(listModel);
        //dbList.setCellRenderer(new CheckboxListCellRenderer());

        dbList.setCellRenderer(new CheckboxListRenderer());
        dbList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Add a mouse listener to handle changing selection

        dbList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent event) {
                JList<CheckboxListItem> list =
                        (JList<CheckboxListItem>) event.getSource();

                // Get index of item clicked

                int index = list.locationToIndex(event.getPoint());
                CheckboxListItem item = (CheckboxListItem) list.getModel()
                        .getElementAt(index);

                // Toggle selected state

                item.setSelected(!item.isSelected());

                // Repaint cell

                list.repaint(list.getCellBounds(index, index));
            }
        });

        Set<SimpleDBData> dbs = MetaDataManager.getAllDatabasesInProjects();
        for (SimpleDBData db : dbs) {
            listModel.addElement(new CheckboxListItem(db));
        }
        dbList.revalidate();
        dbList.updateUI();

        this.setPreferredSize(new Dimension(450, 800));
        setContentPane(mainPanel);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setTitle("Data source import");
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                closeWindow();
            }
        });
        confirmButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                confirmChoices();
            }
        });
    }

    public void confirmChoices() {
        List<SimpleDBData> dbs = new ArrayList<>();
        for (int i = 0; i < listModel.getSize(); i++) {
            CheckboxListItem item = (CheckboxListItem) listModel.get(i);
            if (item.isSelected) {
                dbs.add(item.getDB());
            }
        }

        databaseConnectionWizard.addImportedDatabases(dbs);
        closeWindow();
    }

    private void closeWindow() {
        this.setVisible(false);
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        dbList = new JList();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 8.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(5, 10, 0, 10);
        mainPanel.add(dbList, gbc);
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 0.5;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(cancelButton, gbc);
        helpLabel = new JLabel();
        helpLabel.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        mainPanel.add(helpLabel, gbc);
        confirmButton = new JButton();
        confirmButton.setText("Confirm");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.EAST;
        mainPanel.add(confirmButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    class CheckboxListItem {
        private SimpleDBData dbLabel;
        private boolean isSelected = false;

        public CheckboxListItem(SimpleDBData dbLabel) {
            this.dbLabel = dbLabel;
        }

        public boolean isSelected() {
            return isSelected;
        }

        public SimpleDBData getDB() {
            return dbLabel;
        }

        public void setSelected(boolean isSelected) {
            this.isSelected = isSelected;
        }

        public String toString() {
            return dbLabel.toString();
        }
    }


    // Handles rendering cells in the list using a check box

    class CheckboxListRenderer extends JCheckBox implements
            ListCellRenderer<CheckboxListItem> {

        @Override
        public Component getListCellRendererComponent(
                JList<? extends CheckboxListItem> list, CheckboxListItem value,
                int index, boolean isSelected, boolean cellHasFocus) {
            setEnabled(list.isEnabled());
            setSelected(value.isSelected());
            setFont(list.getFont());
            setBackground(list.getBackground());
            setForeground(list.getForeground());
            setText(value.toString());
            return this;
        }
    }
}


